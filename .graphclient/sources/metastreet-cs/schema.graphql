schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

type Auction {
  id: Bytes!
  liquidation: Liquidation!
  collateralToken: CollateralToken
  currencyToken: CurrencyToken!
  collateralTokenId: BigInt!
  quantity: BigInt!
  highestBid: Bid
  bidsCount: Int!
  endTime: BigInt!
  bids(skip: Int = 0, first: Int = 100, orderBy: Bid_orderBy, orderDirection: OrderDirection, where: Bid_filter): [Bid!]!
  status: AuctionStatus
}

enum AuctionStatus {
  Created
  Started
  Ended
}

input Auction_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  liquidation: String
  liquidation_not: String
  liquidation_gt: String
  liquidation_lt: String
  liquidation_gte: String
  liquidation_lte: String
  liquidation_in: [String!]
  liquidation_not_in: [String!]
  liquidation_contains: String
  liquidation_contains_nocase: String
  liquidation_not_contains: String
  liquidation_not_contains_nocase: String
  liquidation_starts_with: String
  liquidation_starts_with_nocase: String
  liquidation_not_starts_with: String
  liquidation_not_starts_with_nocase: String
  liquidation_ends_with: String
  liquidation_ends_with_nocase: String
  liquidation_not_ends_with: String
  liquidation_not_ends_with_nocase: String
  liquidation_: Liquidation_filter
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: CollateralToken_filter
  currencyToken: String
  currencyToken_not: String
  currencyToken_gt: String
  currencyToken_lt: String
  currencyToken_gte: String
  currencyToken_lte: String
  currencyToken_in: [String!]
  currencyToken_not_in: [String!]
  currencyToken_contains: String
  currencyToken_contains_nocase: String
  currencyToken_not_contains: String
  currencyToken_not_contains_nocase: String
  currencyToken_starts_with: String
  currencyToken_starts_with_nocase: String
  currencyToken_not_starts_with: String
  currencyToken_not_starts_with_nocase: String
  currencyToken_ends_with: String
  currencyToken_ends_with_nocase: String
  currencyToken_not_ends_with: String
  currencyToken_not_ends_with_nocase: String
  currencyToken_: CurrencyToken_filter
  collateralTokenId: BigInt
  collateralTokenId_not: BigInt
  collateralTokenId_gt: BigInt
  collateralTokenId_lt: BigInt
  collateralTokenId_gte: BigInt
  collateralTokenId_lte: BigInt
  collateralTokenId_in: [BigInt!]
  collateralTokenId_not_in: [BigInt!]
  quantity: BigInt
  quantity_not: BigInt
  quantity_gt: BigInt
  quantity_lt: BigInt
  quantity_gte: BigInt
  quantity_lte: BigInt
  quantity_in: [BigInt!]
  quantity_not_in: [BigInt!]
  highestBid: String
  highestBid_not: String
  highestBid_gt: String
  highestBid_lt: String
  highestBid_gte: String
  highestBid_lte: String
  highestBid_in: [String!]
  highestBid_not_in: [String!]
  highestBid_contains: String
  highestBid_contains_nocase: String
  highestBid_not_contains: String
  highestBid_not_contains_nocase: String
  highestBid_starts_with: String
  highestBid_starts_with_nocase: String
  highestBid_not_starts_with: String
  highestBid_not_starts_with_nocase: String
  highestBid_ends_with: String
  highestBid_ends_with_nocase: String
  highestBid_not_ends_with: String
  highestBid_not_ends_with_nocase: String
  highestBid_: Bid_filter
  bidsCount: Int
  bidsCount_not: Int
  bidsCount_gt: Int
  bidsCount_lt: Int
  bidsCount_gte: Int
  bidsCount_lte: Int
  bidsCount_in: [Int!]
  bidsCount_not_in: [Int!]
  endTime: BigInt
  endTime_not: BigInt
  endTime_gt: BigInt
  endTime_lt: BigInt
  endTime_gte: BigInt
  endTime_lte: BigInt
  endTime_in: [BigInt!]
  endTime_not_in: [BigInt!]
  bids_: Bid_filter
  status: AuctionStatus
  status_not: AuctionStatus
  status_in: [AuctionStatus!]
  status_not_in: [AuctionStatus!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Auction_filter]
  or: [Auction_filter]
}

enum Auction_orderBy {
  id
  liquidation
  liquidation__id
  liquidation__source
  liquidation__sourceImplementation
  collateralToken
  collateralToken__id
  collateralToken__name
  currencyToken
  currencyToken__id
  currencyToken__name
  currencyToken__symbol
  collateralTokenId
  quantity
  highestBid
  highestBid__id
  highestBid__bidder
  highestBid__amount
  highestBid__isHighest
  highestBid__timestamp
  highestBid__transactionHash
  bidsCount
  endTime
  bids
  status
}

type Batch {
  id: ID!
  owner: Bytes!
  collateralWrapperContext: Bytes!
  underlyingCollateralTokenAddress: Bytes!
  underlyingCollateralTokenIds: [BigInt!]!
}

input Batch_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  collateralWrapperContext: Bytes
  collateralWrapperContext_not: Bytes
  collateralWrapperContext_gt: Bytes
  collateralWrapperContext_lt: Bytes
  collateralWrapperContext_gte: Bytes
  collateralWrapperContext_lte: Bytes
  collateralWrapperContext_in: [Bytes!]
  collateralWrapperContext_not_in: [Bytes!]
  collateralWrapperContext_contains: Bytes
  collateralWrapperContext_not_contains: Bytes
  underlyingCollateralTokenAddress: Bytes
  underlyingCollateralTokenAddress_not: Bytes
  underlyingCollateralTokenAddress_gt: Bytes
  underlyingCollateralTokenAddress_lt: Bytes
  underlyingCollateralTokenAddress_gte: Bytes
  underlyingCollateralTokenAddress_lte: Bytes
  underlyingCollateralTokenAddress_in: [Bytes!]
  underlyingCollateralTokenAddress_not_in: [Bytes!]
  underlyingCollateralTokenAddress_contains: Bytes
  underlyingCollateralTokenAddress_not_contains: Bytes
  underlyingCollateralTokenIds: [BigInt!]
  underlyingCollateralTokenIds_not: [BigInt!]
  underlyingCollateralTokenIds_contains: [BigInt!]
  underlyingCollateralTokenIds_contains_nocase: [BigInt!]
  underlyingCollateralTokenIds_not_contains: [BigInt!]
  underlyingCollateralTokenIds_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Batch_filter]
  or: [Batch_filter]
}

enum Batch_orderBy {
  id
  owner
  collateralWrapperContext
  underlyingCollateralTokenAddress
  underlyingCollateralTokenIds
}

type Bid {
  id: Bytes!
  auction: Auction!
  bidder: Bytes!
  amount: BigInt!
  isHighest: Boolean!
  timestamp: BigInt!
  transactionHash: Bytes!
}

input Bid_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  auction: String
  auction_not: String
  auction_gt: String
  auction_lt: String
  auction_gte: String
  auction_lte: String
  auction_in: [String!]
  auction_not_in: [String!]
  auction_contains: String
  auction_contains_nocase: String
  auction_not_contains: String
  auction_not_contains_nocase: String
  auction_starts_with: String
  auction_starts_with_nocase: String
  auction_not_starts_with: String
  auction_not_starts_with_nocase: String
  auction_ends_with: String
  auction_ends_with_nocase: String
  auction_not_ends_with: String
  auction_not_ends_with_nocase: String
  auction_: Auction_filter
  bidder: Bytes
  bidder_not: Bytes
  bidder_gt: Bytes
  bidder_lt: Bytes
  bidder_gte: Bytes
  bidder_lte: Bytes
  bidder_in: [Bytes!]
  bidder_not_in: [Bytes!]
  bidder_contains: Bytes
  bidder_not_contains: Bytes
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  isHighest: Boolean
  isHighest_not: Boolean
  isHighest_in: [Boolean!]
  isHighest_not_in: [Boolean!]
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Bid_filter]
  or: [Bid_filter]
}

enum Bid_orderBy {
  id
  auction
  auction__id
  auction__collateralTokenId
  auction__quantity
  auction__bidsCount
  auction__endTime
  auction__status
  bidder
  amount
  isHighest
  timestamp
  transactionHash
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

type Bundle {
  id: ID!
  owner: Bytes!
  collateralWrapperContext: Bytes!
  underlyingCollateralTokenAddress: Bytes!
  underlyingCollateralTokenIds: [BigInt!]!
}

input Bundle_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  owner: Bytes
  owner_not: Bytes
  owner_gt: Bytes
  owner_lt: Bytes
  owner_gte: Bytes
  owner_lte: Bytes
  owner_in: [Bytes!]
  owner_not_in: [Bytes!]
  owner_contains: Bytes
  owner_not_contains: Bytes
  collateralWrapperContext: Bytes
  collateralWrapperContext_not: Bytes
  collateralWrapperContext_gt: Bytes
  collateralWrapperContext_lt: Bytes
  collateralWrapperContext_gte: Bytes
  collateralWrapperContext_lte: Bytes
  collateralWrapperContext_in: [Bytes!]
  collateralWrapperContext_not_in: [Bytes!]
  collateralWrapperContext_contains: Bytes
  collateralWrapperContext_not_contains: Bytes
  underlyingCollateralTokenAddress: Bytes
  underlyingCollateralTokenAddress_not: Bytes
  underlyingCollateralTokenAddress_gt: Bytes
  underlyingCollateralTokenAddress_lt: Bytes
  underlyingCollateralTokenAddress_gte: Bytes
  underlyingCollateralTokenAddress_lte: Bytes
  underlyingCollateralTokenAddress_in: [Bytes!]
  underlyingCollateralTokenAddress_not_in: [Bytes!]
  underlyingCollateralTokenAddress_contains: Bytes
  underlyingCollateralTokenAddress_not_contains: Bytes
  underlyingCollateralTokenIds: [BigInt!]
  underlyingCollateralTokenIds_not: [BigInt!]
  underlyingCollateralTokenIds_contains: [BigInt!]
  underlyingCollateralTokenIds_contains_nocase: [BigInt!]
  underlyingCollateralTokenIds_not_contains: [BigInt!]
  underlyingCollateralTokenIds_not_contains_nocase: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Bundle_filter]
  or: [Bundle_filter]
}

enum Bundle_orderBy {
  id
  owner
  collateralWrapperContext
  underlyingCollateralTokenAddress
  underlyingCollateralTokenIds
}

scalar Bytes

type CollateralLiquidated {
  id: Bytes!
  loan: Loan!
  proceeds: BigInt!
}

input CollateralLiquidated_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: Loan_filter
  proceeds: BigInt
  proceeds_not: BigInt
  proceeds_gt: BigInt
  proceeds_lt: BigInt
  proceeds_gte: BigInt
  proceeds_lte: BigInt
  proceeds_in: [BigInt!]
  proceeds_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CollateralLiquidated_filter]
  or: [CollateralLiquidated_filter]
}

enum CollateralLiquidated_orderBy {
  id
  loan
  loan__id
  loan__status
  loan__transactionHash
  loan__timestamp
  loan__completion
  loan__delegate
  loan__borrower
  loan__maturity
  loan__duration
  loan__collateralWrapperToken
  loan__collateralWrapperTokenId
  loan__principal
  loan__repayment
  loan__proceeds
  loan__collateralWrapperContext
  loan__loanReceipt
  proceeds
}

type CollateralToken {
  id: Bytes!
  name: String!
  pools(skip: Int = 0, first: Int = 100, orderBy: Pool_orderBy, orderDirection: OrderDirection, where: Pool_filter): [Pool!]!
}

input CollateralToken_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  pools_: Pool_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CollateralToken_filter]
  or: [CollateralToken_filter]
}

enum CollateralToken_orderBy {
  id
  name
  pools
}

type CurrencyToken {
  id: Bytes!
  name: String!
  symbol: String!
  pools(skip: Int = 0, first: Int = 100, orderBy: Pool_orderBy, orderDirection: OrderDirection, where: Pool_filter): [Pool!]!
}

input CurrencyToken_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  pools_: Pool_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [CurrencyToken_filter]
  or: [CurrencyToken_filter]
}

enum CurrencyToken_orderBy {
  id
  name
  symbol
  pools
}

type Deposit {
  id: Bytes!
  pool: Pool!
  tick: Tick!
  account: Bytes!
  shares: BigInt!
  depositedAmount: BigInt!
  updatedAt: BigInt!
  createdAt: BigInt!
  redemptions(skip: Int = 0, first: Int = 100, orderBy: Redemption_orderBy, orderDirection: OrderDirection, where: Redemption_filter): [Redemption!]!
}

input Deposit_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Tick_filter
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  depositedAmount: BigInt
  depositedAmount_not: BigInt
  depositedAmount_gt: BigInt
  depositedAmount_lt: BigInt
  depositedAmount_gte: BigInt
  depositedAmount_lte: BigInt
  depositedAmount_in: [BigInt!]
  depositedAmount_not_in: [BigInt!]
  updatedAt: BigInt
  updatedAt_not: BigInt
  updatedAt_gt: BigInt
  updatedAt_lt: BigInt
  updatedAt_gte: BigInt
  updatedAt_lte: BigInt
  updatedAt_in: [BigInt!]
  updatedAt_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  redemptions_: Redemption_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Deposit_filter]
  or: [Deposit_filter]
}

enum Deposit_orderBy {
  id
  pool
  pool__id
  pool__implementationVersionMajor
  pool__implementation
  pool__adminFeeRate
  pool__collateralLiquidator
  pool__delegationRegistry
  pool__tokenIdMerkleRoot
  pool__tokenIdMerkleMetadataURI
  pool__adminFeeBalance
  pool__totalValueLocked
  pool__totalValueAvailable
  pool__totalValueUsed
  pool__loansOriginated
  pool__loansActive
  pool__loansRepaid
  pool__loansLiquidated
  pool__loansCollateralLiquidated
  tick
  tick__id
  tick__raw
  tick__limit
  tick__duration
  tick__rate
  tick__durationIndex
  tick__rateIndex
  tick__active
  tick__value
  tick__shares
  tick__available
  tick__pending
  tick__redemptionPending
  tick__prev
  tick__next
  tick__accrued
  tick__accrualRate
  tick__accrualTimestamp
  tick__principalWeightedDuration
  tick__interestWeightedMaturity
  account
  shares
  depositedAmount
  updatedAt
  createdAt
  redemptions
}

type Deposited {
  id: Bytes!
  account: Bytes!
  tick: Tick!
  amount: BigInt!
  shares: BigInt!
}

input Deposited_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Tick_filter
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Deposited_filter]
  or: [Deposited_filter]
}

enum Deposited_orderBy {
  id
  account
  tick
  tick__id
  tick__raw
  tick__limit
  tick__duration
  tick__rate
  tick__durationIndex
  tick__rateIndex
  tick__active
  tick__value
  tick__shares
  tick__available
  tick__pending
  tick__redemptionPending
  tick__prev
  tick__next
  tick__accrued
  tick__accrualRate
  tick__accrualTimestamp
  tick__principalWeightedDuration
  tick__interestWeightedMaturity
  amount
  shares
}

"""
8 bytes signed integer

"""
scalar Int8

type Liquidation {
  id: Bytes!
  source: Bytes!
  sourceImplementation: Bytes!
  collateralToken: CollateralToken!
  currencyToken: CurrencyToken!
  loan: Loan!
  auctions(skip: Int = 0, first: Int = 100, orderBy: Auction_orderBy, orderDirection: OrderDirection, where: Auction_filter): [Auction!]!
}

input Liquidation_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  source: Bytes
  source_not: Bytes
  source_gt: Bytes
  source_lt: Bytes
  source_gte: Bytes
  source_lte: Bytes
  source_in: [Bytes!]
  source_not_in: [Bytes!]
  source_contains: Bytes
  source_not_contains: Bytes
  sourceImplementation: Bytes
  sourceImplementation_not: Bytes
  sourceImplementation_gt: Bytes
  sourceImplementation_lt: Bytes
  sourceImplementation_gte: Bytes
  sourceImplementation_lte: Bytes
  sourceImplementation_in: [Bytes!]
  sourceImplementation_not_in: [Bytes!]
  sourceImplementation_contains: Bytes
  sourceImplementation_not_contains: Bytes
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: CollateralToken_filter
  currencyToken: String
  currencyToken_not: String
  currencyToken_gt: String
  currencyToken_lt: String
  currencyToken_gte: String
  currencyToken_lte: String
  currencyToken_in: [String!]
  currencyToken_not_in: [String!]
  currencyToken_contains: String
  currencyToken_contains_nocase: String
  currencyToken_not_contains: String
  currencyToken_not_contains_nocase: String
  currencyToken_starts_with: String
  currencyToken_starts_with_nocase: String
  currencyToken_not_starts_with: String
  currencyToken_not_starts_with_nocase: String
  currencyToken_ends_with: String
  currencyToken_ends_with_nocase: String
  currencyToken_not_ends_with: String
  currencyToken_not_ends_with_nocase: String
  currencyToken_: CurrencyToken_filter
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: Loan_filter
  auctions_: Auction_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Liquidation_filter]
  or: [Liquidation_filter]
}

enum Liquidation_orderBy {
  id
  source
  sourceImplementation
  collateralToken
  collateralToken__id
  collateralToken__name
  currencyToken
  currencyToken__id
  currencyToken__name
  currencyToken__symbol
  loan
  loan__id
  loan__status
  loan__transactionHash
  loan__timestamp
  loan__completion
  loan__delegate
  loan__borrower
  loan__maturity
  loan__duration
  loan__collateralWrapperToken
  loan__collateralWrapperTokenId
  loan__principal
  loan__repayment
  loan__proceeds
  loan__collateralWrapperContext
  loan__loanReceipt
  auctions
}

type Loan {
  id: Bytes!
  pool: Pool!
  status: LoanStatus!
  transactionHash: Bytes!
  timestamp: BigInt!
  completion: BigInt
  bundle: Bundle
  batch: Batch
  delegate: Bytes
  borrower: Bytes!
  maturity: BigInt!
  duration: BigInt!
  collateralToken: CollateralToken!
  collateralTokenIds: [BigInt!]!
  collateralWrapperToken: Bytes
  collateralWrapperTokenId: BigInt
  ticks: [BigInt!]!
  useds: [BigInt!]!
  interests: [BigInt!]!
  principal: BigInt!
  repayment: BigInt!
  proceeds: BigInt
  collateralWrapperContext: Bytes!
  loanReceipt: Bytes!
}

type LoanLiquidated {
  id: Bytes!
  loan: Loan!
}

input LoanLiquidated_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: Loan_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LoanLiquidated_filter]
  or: [LoanLiquidated_filter]
}

enum LoanLiquidated_orderBy {
  id
  loan
  loan__id
  loan__status
  loan__transactionHash
  loan__timestamp
  loan__completion
  loan__delegate
  loan__borrower
  loan__maturity
  loan__duration
  loan__collateralWrapperToken
  loan__collateralWrapperTokenId
  loan__principal
  loan__repayment
  loan__proceeds
  loan__collateralWrapperContext
  loan__loanReceipt
}

type LoanOriginated {
  id: Bytes!
  loan: Loan!
}

input LoanOriginated_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: Loan_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LoanOriginated_filter]
  or: [LoanOriginated_filter]
}

enum LoanOriginated_orderBy {
  id
  loan
  loan__id
  loan__status
  loan__transactionHash
  loan__timestamp
  loan__completion
  loan__delegate
  loan__borrower
  loan__maturity
  loan__duration
  loan__collateralWrapperToken
  loan__collateralWrapperTokenId
  loan__principal
  loan__repayment
  loan__proceeds
  loan__collateralWrapperContext
  loan__loanReceipt
}

type LoanRepaid {
  id: Bytes!
  loan: Loan!
}

input LoanRepaid_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  loan: String
  loan_not: String
  loan_gt: String
  loan_lt: String
  loan_gte: String
  loan_lte: String
  loan_in: [String!]
  loan_not_in: [String!]
  loan_contains: String
  loan_contains_nocase: String
  loan_not_contains: String
  loan_not_contains_nocase: String
  loan_starts_with: String
  loan_starts_with_nocase: String
  loan_not_starts_with: String
  loan_not_starts_with_nocase: String
  loan_ends_with: String
  loan_ends_with_nocase: String
  loan_not_ends_with: String
  loan_not_ends_with_nocase: String
  loan_: Loan_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [LoanRepaid_filter]
  or: [LoanRepaid_filter]
}

enum LoanRepaid_orderBy {
  id
  loan
  loan__id
  loan__status
  loan__transactionHash
  loan__timestamp
  loan__completion
  loan__delegate
  loan__borrower
  loan__maturity
  loan__duration
  loan__collateralWrapperToken
  loan__collateralWrapperTokenId
  loan__principal
  loan__repayment
  loan__proceeds
  loan__collateralWrapperContext
  loan__loanReceipt
}

enum LoanStatus {
  Active
  Liquidated
  Repaid
  CollateralLiquidated
}

input Loan_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  status: LoanStatus
  status_not: LoanStatus
  status_in: [LoanStatus!]
  status_not_in: [LoanStatus!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  completion: BigInt
  completion_not: BigInt
  completion_gt: BigInt
  completion_lt: BigInt
  completion_gte: BigInt
  completion_lte: BigInt
  completion_in: [BigInt!]
  completion_not_in: [BigInt!]
  bundle: String
  bundle_not: String
  bundle_gt: String
  bundle_lt: String
  bundle_gte: String
  bundle_lte: String
  bundle_in: [String!]
  bundle_not_in: [String!]
  bundle_contains: String
  bundle_contains_nocase: String
  bundle_not_contains: String
  bundle_not_contains_nocase: String
  bundle_starts_with: String
  bundle_starts_with_nocase: String
  bundle_not_starts_with: String
  bundle_not_starts_with_nocase: String
  bundle_ends_with: String
  bundle_ends_with_nocase: String
  bundle_not_ends_with: String
  bundle_not_ends_with_nocase: String
  bundle_: Bundle_filter
  batch: String
  batch_not: String
  batch_gt: String
  batch_lt: String
  batch_gte: String
  batch_lte: String
  batch_in: [String!]
  batch_not_in: [String!]
  batch_contains: String
  batch_contains_nocase: String
  batch_not_contains: String
  batch_not_contains_nocase: String
  batch_starts_with: String
  batch_starts_with_nocase: String
  batch_not_starts_with: String
  batch_not_starts_with_nocase: String
  batch_ends_with: String
  batch_ends_with_nocase: String
  batch_not_ends_with: String
  batch_not_ends_with_nocase: String
  batch_: Batch_filter
  delegate: Bytes
  delegate_not: Bytes
  delegate_gt: Bytes
  delegate_lt: Bytes
  delegate_gte: Bytes
  delegate_lte: Bytes
  delegate_in: [Bytes!]
  delegate_not_in: [Bytes!]
  delegate_contains: Bytes
  delegate_not_contains: Bytes
  borrower: Bytes
  borrower_not: Bytes
  borrower_gt: Bytes
  borrower_lt: Bytes
  borrower_gte: Bytes
  borrower_lte: Bytes
  borrower_in: [Bytes!]
  borrower_not_in: [Bytes!]
  borrower_contains: Bytes
  borrower_not_contains: Bytes
  maturity: BigInt
  maturity_not: BigInt
  maturity_gt: BigInt
  maturity_lt: BigInt
  maturity_gte: BigInt
  maturity_lte: BigInt
  maturity_in: [BigInt!]
  maturity_not_in: [BigInt!]
  duration: BigInt
  duration_not: BigInt
  duration_gt: BigInt
  duration_lt: BigInt
  duration_gte: BigInt
  duration_lte: BigInt
  duration_in: [BigInt!]
  duration_not_in: [BigInt!]
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: CollateralToken_filter
  collateralTokenIds: [BigInt!]
  collateralTokenIds_not: [BigInt!]
  collateralTokenIds_contains: [BigInt!]
  collateralTokenIds_contains_nocase: [BigInt!]
  collateralTokenIds_not_contains: [BigInt!]
  collateralTokenIds_not_contains_nocase: [BigInt!]
  collateralWrapperToken: Bytes
  collateralWrapperToken_not: Bytes
  collateralWrapperToken_gt: Bytes
  collateralWrapperToken_lt: Bytes
  collateralWrapperToken_gte: Bytes
  collateralWrapperToken_lte: Bytes
  collateralWrapperToken_in: [Bytes!]
  collateralWrapperToken_not_in: [Bytes!]
  collateralWrapperToken_contains: Bytes
  collateralWrapperToken_not_contains: Bytes
  collateralWrapperTokenId: BigInt
  collateralWrapperTokenId_not: BigInt
  collateralWrapperTokenId_gt: BigInt
  collateralWrapperTokenId_lt: BigInt
  collateralWrapperTokenId_gte: BigInt
  collateralWrapperTokenId_lte: BigInt
  collateralWrapperTokenId_in: [BigInt!]
  collateralWrapperTokenId_not_in: [BigInt!]
  ticks: [BigInt!]
  ticks_not: [BigInt!]
  ticks_contains: [BigInt!]
  ticks_contains_nocase: [BigInt!]
  ticks_not_contains: [BigInt!]
  ticks_not_contains_nocase: [BigInt!]
  useds: [BigInt!]
  useds_not: [BigInt!]
  useds_contains: [BigInt!]
  useds_contains_nocase: [BigInt!]
  useds_not_contains: [BigInt!]
  useds_not_contains_nocase: [BigInt!]
  interests: [BigInt!]
  interests_not: [BigInt!]
  interests_contains: [BigInt!]
  interests_contains_nocase: [BigInt!]
  interests_not_contains: [BigInt!]
  interests_not_contains_nocase: [BigInt!]
  principal: BigInt
  principal_not: BigInt
  principal_gt: BigInt
  principal_lt: BigInt
  principal_gte: BigInt
  principal_lte: BigInt
  principal_in: [BigInt!]
  principal_not_in: [BigInt!]
  repayment: BigInt
  repayment_not: BigInt
  repayment_gt: BigInt
  repayment_lt: BigInt
  repayment_gte: BigInt
  repayment_lte: BigInt
  repayment_in: [BigInt!]
  repayment_not_in: [BigInt!]
  proceeds: BigInt
  proceeds_not: BigInt
  proceeds_gt: BigInt
  proceeds_lt: BigInt
  proceeds_gte: BigInt
  proceeds_lte: BigInt
  proceeds_in: [BigInt!]
  proceeds_not_in: [BigInt!]
  collateralWrapperContext: Bytes
  collateralWrapperContext_not: Bytes
  collateralWrapperContext_gt: Bytes
  collateralWrapperContext_lt: Bytes
  collateralWrapperContext_gte: Bytes
  collateralWrapperContext_lte: Bytes
  collateralWrapperContext_in: [Bytes!]
  collateralWrapperContext_not_in: [Bytes!]
  collateralWrapperContext_contains: Bytes
  collateralWrapperContext_not_contains: Bytes
  loanReceipt: Bytes
  loanReceipt_not: Bytes
  loanReceipt_gt: Bytes
  loanReceipt_lt: Bytes
  loanReceipt_gte: Bytes
  loanReceipt_lte: Bytes
  loanReceipt_in: [Bytes!]
  loanReceipt_not_in: [Bytes!]
  loanReceipt_contains: Bytes
  loanReceipt_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Loan_filter]
  or: [Loan_filter]
}

enum Loan_orderBy {
  id
  pool
  pool__id
  pool__implementationVersionMajor
  pool__implementation
  pool__adminFeeRate
  pool__collateralLiquidator
  pool__delegationRegistry
  pool__tokenIdMerkleRoot
  pool__tokenIdMerkleMetadataURI
  pool__adminFeeBalance
  pool__totalValueLocked
  pool__totalValueAvailable
  pool__totalValueUsed
  pool__loansOriginated
  pool__loansActive
  pool__loansRepaid
  pool__loansLiquidated
  pool__loansCollateralLiquidated
  status
  transactionHash
  timestamp
  completion
  bundle
  bundle__id
  bundle__owner
  bundle__collateralWrapperContext
  bundle__underlyingCollateralTokenAddress
  batch
  batch__id
  batch__owner
  batch__collateralWrapperContext
  batch__underlyingCollateralTokenAddress
  delegate
  borrower
  maturity
  duration
  collateralToken
  collateralToken__id
  collateralToken__name
  collateralTokenIds
  collateralWrapperToken
  collateralWrapperTokenId
  ticks
  useds
  interests
  principal
  repayment
  proceeds
  collateralWrapperContext
  loanReceipt
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Pool {
  id: Bytes!
  implementationVersionMajor: String!
  implementation: Bytes!
  collateralToken: CollateralToken!
  currencyToken: CurrencyToken!
  collateralWrappers: [Bytes!]!
  durations: [BigInt!]!
  rates: [BigInt!]!
  adminFeeRate: BigInt!
  collateralLiquidator: Bytes!
  delegationRegistry: Bytes!
  tokenIdRange: [BigInt!]
  tokenIdSet: [BigInt!]
  tokenIdMerkleRoot: Bytes
  tokenIdMerkleMetadataURI: String
  maxBorrows: [BigInt!]!
  adminFeeBalance: BigInt!
  ticks(skip: Int = 0, first: Int = 100, orderBy: Tick_orderBy, orderDirection: OrderDirection, where: Tick_filter): [Tick!]!
  deposits(skip: Int = 0, first: Int = 100, orderBy: Deposit_orderBy, orderDirection: OrderDirection, where: Deposit_filter): [Deposit!]!
  loans(skip: Int = 0, first: Int = 100, orderBy: Loan_orderBy, orderDirection: OrderDirection, where: Loan_filter): [Loan!]!
  events(skip: Int = 0, first: Int = 100, orderBy: PoolEvent_orderBy, orderDirection: OrderDirection, where: PoolEvent_filter): [PoolEvent!]!
  totalValueLocked: BigInt!
  totalValueAvailable: BigInt!
  totalValueUsed: BigInt!
  loansOriginated: BigInt!
  loansActive: BigInt!
  loansRepaid: BigInt!
  loansLiquidated: BigInt!
  loansCollateralLiquidated: BigInt!
  dayData(skip: Int = 0, first: Int = 100, orderBy: PoolDayData_orderBy, orderDirection: OrderDirection, where: PoolDayData_filter): [PoolDayData!]!
}

type PoolDayData {
  id: Bytes!
  timestamp: BigInt!
  pool: Pool!
  totalValueLocked: BigInt!
  totalValueAvailable: BigInt!
  totalValueUsed: BigInt!
}

input PoolDayData_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  totalValueLocked: BigInt
  totalValueLocked_not: BigInt
  totalValueLocked_gt: BigInt
  totalValueLocked_lt: BigInt
  totalValueLocked_gte: BigInt
  totalValueLocked_lte: BigInt
  totalValueLocked_in: [BigInt!]
  totalValueLocked_not_in: [BigInt!]
  totalValueAvailable: BigInt
  totalValueAvailable_not: BigInt
  totalValueAvailable_gt: BigInt
  totalValueAvailable_lt: BigInt
  totalValueAvailable_gte: BigInt
  totalValueAvailable_lte: BigInt
  totalValueAvailable_in: [BigInt!]
  totalValueAvailable_not_in: [BigInt!]
  totalValueUsed: BigInt
  totalValueUsed_not: BigInt
  totalValueUsed_gt: BigInt
  totalValueUsed_lt: BigInt
  totalValueUsed_gte: BigInt
  totalValueUsed_lte: BigInt
  totalValueUsed_in: [BigInt!]
  totalValueUsed_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolDayData_filter]
  or: [PoolDayData_filter]
}

enum PoolDayData_orderBy {
  id
  timestamp
  pool
  pool__id
  pool__implementationVersionMajor
  pool__implementation
  pool__adminFeeRate
  pool__collateralLiquidator
  pool__delegationRegistry
  pool__tokenIdMerkleRoot
  pool__tokenIdMerkleMetadataURI
  pool__adminFeeBalance
  pool__totalValueLocked
  pool__totalValueAvailable
  pool__totalValueUsed
  pool__loansOriginated
  pool__loansActive
  pool__loansRepaid
  pool__loansLiquidated
  pool__loansCollateralLiquidated
  totalValueLocked
  totalValueAvailable
  totalValueUsed
}

type PoolEvent {
  id: Bytes!
  transactionHash: Bytes!
  timestamp: BigInt!
  from: Bytes!
  account: Bytes!
  type: PoolEventType!
  pool: Pool!
  deposit: Deposit
  loanOriginated: LoanOriginated
  loanRepaid: LoanRepaid
  loanLiquidated: LoanLiquidated
  collateralLiquidated: CollateralLiquidated
  deposited: Deposited
  redeemed: Redeemed
  withdrawn: Withdrawn
  tokenCreated: TokenCreated
}

enum PoolEventType {
  LoanOriginated
  LoanRepaid
  LoanLiquidated
  CollateralLiquidated
  Deposited
  Redeemed
  Withdrawn
  TokenCreated
}

input PoolEvent_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  timestamp: BigInt
  timestamp_not: BigInt
  timestamp_gt: BigInt
  timestamp_lt: BigInt
  timestamp_gte: BigInt
  timestamp_lte: BigInt
  timestamp_in: [BigInt!]
  timestamp_not_in: [BigInt!]
  from: Bytes
  from_not: Bytes
  from_gt: Bytes
  from_lt: Bytes
  from_gte: Bytes
  from_lte: Bytes
  from_in: [Bytes!]
  from_not_in: [Bytes!]
  from_contains: Bytes
  from_not_contains: Bytes
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  type: PoolEventType
  type_not: PoolEventType
  type_in: [PoolEventType!]
  type_not_in: [PoolEventType!]
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  deposit: String
  deposit_not: String
  deposit_gt: String
  deposit_lt: String
  deposit_gte: String
  deposit_lte: String
  deposit_in: [String!]
  deposit_not_in: [String!]
  deposit_contains: String
  deposit_contains_nocase: String
  deposit_not_contains: String
  deposit_not_contains_nocase: String
  deposit_starts_with: String
  deposit_starts_with_nocase: String
  deposit_not_starts_with: String
  deposit_not_starts_with_nocase: String
  deposit_ends_with: String
  deposit_ends_with_nocase: String
  deposit_not_ends_with: String
  deposit_not_ends_with_nocase: String
  deposit_: Deposit_filter
  loanOriginated: String
  loanOriginated_not: String
  loanOriginated_gt: String
  loanOriginated_lt: String
  loanOriginated_gte: String
  loanOriginated_lte: String
  loanOriginated_in: [String!]
  loanOriginated_not_in: [String!]
  loanOriginated_contains: String
  loanOriginated_contains_nocase: String
  loanOriginated_not_contains: String
  loanOriginated_not_contains_nocase: String
  loanOriginated_starts_with: String
  loanOriginated_starts_with_nocase: String
  loanOriginated_not_starts_with: String
  loanOriginated_not_starts_with_nocase: String
  loanOriginated_ends_with: String
  loanOriginated_ends_with_nocase: String
  loanOriginated_not_ends_with: String
  loanOriginated_not_ends_with_nocase: String
  loanOriginated_: LoanOriginated_filter
  loanRepaid: String
  loanRepaid_not: String
  loanRepaid_gt: String
  loanRepaid_lt: String
  loanRepaid_gte: String
  loanRepaid_lte: String
  loanRepaid_in: [String!]
  loanRepaid_not_in: [String!]
  loanRepaid_contains: String
  loanRepaid_contains_nocase: String
  loanRepaid_not_contains: String
  loanRepaid_not_contains_nocase: String
  loanRepaid_starts_with: String
  loanRepaid_starts_with_nocase: String
  loanRepaid_not_starts_with: String
  loanRepaid_not_starts_with_nocase: String
  loanRepaid_ends_with: String
  loanRepaid_ends_with_nocase: String
  loanRepaid_not_ends_with: String
  loanRepaid_not_ends_with_nocase: String
  loanRepaid_: LoanRepaid_filter
  loanLiquidated: String
  loanLiquidated_not: String
  loanLiquidated_gt: String
  loanLiquidated_lt: String
  loanLiquidated_gte: String
  loanLiquidated_lte: String
  loanLiquidated_in: [String!]
  loanLiquidated_not_in: [String!]
  loanLiquidated_contains: String
  loanLiquidated_contains_nocase: String
  loanLiquidated_not_contains: String
  loanLiquidated_not_contains_nocase: String
  loanLiquidated_starts_with: String
  loanLiquidated_starts_with_nocase: String
  loanLiquidated_not_starts_with: String
  loanLiquidated_not_starts_with_nocase: String
  loanLiquidated_ends_with: String
  loanLiquidated_ends_with_nocase: String
  loanLiquidated_not_ends_with: String
  loanLiquidated_not_ends_with_nocase: String
  loanLiquidated_: LoanLiquidated_filter
  collateralLiquidated: String
  collateralLiquidated_not: String
  collateralLiquidated_gt: String
  collateralLiquidated_lt: String
  collateralLiquidated_gte: String
  collateralLiquidated_lte: String
  collateralLiquidated_in: [String!]
  collateralLiquidated_not_in: [String!]
  collateralLiquidated_contains: String
  collateralLiquidated_contains_nocase: String
  collateralLiquidated_not_contains: String
  collateralLiquidated_not_contains_nocase: String
  collateralLiquidated_starts_with: String
  collateralLiquidated_starts_with_nocase: String
  collateralLiquidated_not_starts_with: String
  collateralLiquidated_not_starts_with_nocase: String
  collateralLiquidated_ends_with: String
  collateralLiquidated_ends_with_nocase: String
  collateralLiquidated_not_ends_with: String
  collateralLiquidated_not_ends_with_nocase: String
  collateralLiquidated_: CollateralLiquidated_filter
  deposited: String
  deposited_not: String
  deposited_gt: String
  deposited_lt: String
  deposited_gte: String
  deposited_lte: String
  deposited_in: [String!]
  deposited_not_in: [String!]
  deposited_contains: String
  deposited_contains_nocase: String
  deposited_not_contains: String
  deposited_not_contains_nocase: String
  deposited_starts_with: String
  deposited_starts_with_nocase: String
  deposited_not_starts_with: String
  deposited_not_starts_with_nocase: String
  deposited_ends_with: String
  deposited_ends_with_nocase: String
  deposited_not_ends_with: String
  deposited_not_ends_with_nocase: String
  deposited_: Deposited_filter
  redeemed: String
  redeemed_not: String
  redeemed_gt: String
  redeemed_lt: String
  redeemed_gte: String
  redeemed_lte: String
  redeemed_in: [String!]
  redeemed_not_in: [String!]
  redeemed_contains: String
  redeemed_contains_nocase: String
  redeemed_not_contains: String
  redeemed_not_contains_nocase: String
  redeemed_starts_with: String
  redeemed_starts_with_nocase: String
  redeemed_not_starts_with: String
  redeemed_not_starts_with_nocase: String
  redeemed_ends_with: String
  redeemed_ends_with_nocase: String
  redeemed_not_ends_with: String
  redeemed_not_ends_with_nocase: String
  redeemed_: Redeemed_filter
  withdrawn: String
  withdrawn_not: String
  withdrawn_gt: String
  withdrawn_lt: String
  withdrawn_gte: String
  withdrawn_lte: String
  withdrawn_in: [String!]
  withdrawn_not_in: [String!]
  withdrawn_contains: String
  withdrawn_contains_nocase: String
  withdrawn_not_contains: String
  withdrawn_not_contains_nocase: String
  withdrawn_starts_with: String
  withdrawn_starts_with_nocase: String
  withdrawn_not_starts_with: String
  withdrawn_not_starts_with_nocase: String
  withdrawn_ends_with: String
  withdrawn_ends_with_nocase: String
  withdrawn_not_ends_with: String
  withdrawn_not_ends_with_nocase: String
  withdrawn_: Withdrawn_filter
  tokenCreated: String
  tokenCreated_not: String
  tokenCreated_gt: String
  tokenCreated_lt: String
  tokenCreated_gte: String
  tokenCreated_lte: String
  tokenCreated_in: [String!]
  tokenCreated_not_in: [String!]
  tokenCreated_contains: String
  tokenCreated_contains_nocase: String
  tokenCreated_not_contains: String
  tokenCreated_not_contains_nocase: String
  tokenCreated_starts_with: String
  tokenCreated_starts_with_nocase: String
  tokenCreated_not_starts_with: String
  tokenCreated_not_starts_with_nocase: String
  tokenCreated_ends_with: String
  tokenCreated_ends_with_nocase: String
  tokenCreated_not_ends_with: String
  tokenCreated_not_ends_with_nocase: String
  tokenCreated_: TokenCreated_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PoolEvent_filter]
  or: [PoolEvent_filter]
}

enum PoolEvent_orderBy {
  id
  transactionHash
  timestamp
  from
  account
  type
  pool
  pool__id
  pool__implementationVersionMajor
  pool__implementation
  pool__adminFeeRate
  pool__collateralLiquidator
  pool__delegationRegistry
  pool__tokenIdMerkleRoot
  pool__tokenIdMerkleMetadataURI
  pool__adminFeeBalance
  pool__totalValueLocked
  pool__totalValueAvailable
  pool__totalValueUsed
  pool__loansOriginated
  pool__loansActive
  pool__loansRepaid
  pool__loansLiquidated
  pool__loansCollateralLiquidated
  deposit
  deposit__id
  deposit__account
  deposit__shares
  deposit__depositedAmount
  deposit__updatedAt
  deposit__createdAt
  loanOriginated
  loanOriginated__id
  loanRepaid
  loanRepaid__id
  loanLiquidated
  loanLiquidated__id
  collateralLiquidated
  collateralLiquidated__id
  collateralLiquidated__proceeds
  deposited
  deposited__id
  deposited__account
  deposited__amount
  deposited__shares
  redeemed
  redeemed__id
  redeemed__account
  redeemed__shares
  redeemed__estimatedAmount
  withdrawn
  withdrawn__id
  withdrawn__account
  withdrawn__shares
  withdrawn__amount
  tokenCreated
  tokenCreated__id
}

input Pool_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  implementationVersionMajor: String
  implementationVersionMajor_not: String
  implementationVersionMajor_gt: String
  implementationVersionMajor_lt: String
  implementationVersionMajor_gte: String
  implementationVersionMajor_lte: String
  implementationVersionMajor_in: [String!]
  implementationVersionMajor_not_in: [String!]
  implementationVersionMajor_contains: String
  implementationVersionMajor_contains_nocase: String
  implementationVersionMajor_not_contains: String
  implementationVersionMajor_not_contains_nocase: String
  implementationVersionMajor_starts_with: String
  implementationVersionMajor_starts_with_nocase: String
  implementationVersionMajor_not_starts_with: String
  implementationVersionMajor_not_starts_with_nocase: String
  implementationVersionMajor_ends_with: String
  implementationVersionMajor_ends_with_nocase: String
  implementationVersionMajor_not_ends_with: String
  implementationVersionMajor_not_ends_with_nocase: String
  implementation: Bytes
  implementation_not: Bytes
  implementation_gt: Bytes
  implementation_lt: Bytes
  implementation_gte: Bytes
  implementation_lte: Bytes
  implementation_in: [Bytes!]
  implementation_not_in: [Bytes!]
  implementation_contains: Bytes
  implementation_not_contains: Bytes
  collateralToken: String
  collateralToken_not: String
  collateralToken_gt: String
  collateralToken_lt: String
  collateralToken_gte: String
  collateralToken_lte: String
  collateralToken_in: [String!]
  collateralToken_not_in: [String!]
  collateralToken_contains: String
  collateralToken_contains_nocase: String
  collateralToken_not_contains: String
  collateralToken_not_contains_nocase: String
  collateralToken_starts_with: String
  collateralToken_starts_with_nocase: String
  collateralToken_not_starts_with: String
  collateralToken_not_starts_with_nocase: String
  collateralToken_ends_with: String
  collateralToken_ends_with_nocase: String
  collateralToken_not_ends_with: String
  collateralToken_not_ends_with_nocase: String
  collateralToken_: CollateralToken_filter
  currencyToken: String
  currencyToken_not: String
  currencyToken_gt: String
  currencyToken_lt: String
  currencyToken_gte: String
  currencyToken_lte: String
  currencyToken_in: [String!]
  currencyToken_not_in: [String!]
  currencyToken_contains: String
  currencyToken_contains_nocase: String
  currencyToken_not_contains: String
  currencyToken_not_contains_nocase: String
  currencyToken_starts_with: String
  currencyToken_starts_with_nocase: String
  currencyToken_not_starts_with: String
  currencyToken_not_starts_with_nocase: String
  currencyToken_ends_with: String
  currencyToken_ends_with_nocase: String
  currencyToken_not_ends_with: String
  currencyToken_not_ends_with_nocase: String
  currencyToken_: CurrencyToken_filter
  collateralWrappers: [Bytes!]
  collateralWrappers_not: [Bytes!]
  collateralWrappers_contains: [Bytes!]
  collateralWrappers_contains_nocase: [Bytes!]
  collateralWrappers_not_contains: [Bytes!]
  collateralWrappers_not_contains_nocase: [Bytes!]
  durations: [BigInt!]
  durations_not: [BigInt!]
  durations_contains: [BigInt!]
  durations_contains_nocase: [BigInt!]
  durations_not_contains: [BigInt!]
  durations_not_contains_nocase: [BigInt!]
  rates: [BigInt!]
  rates_not: [BigInt!]
  rates_contains: [BigInt!]
  rates_contains_nocase: [BigInt!]
  rates_not_contains: [BigInt!]
  rates_not_contains_nocase: [BigInt!]
  adminFeeRate: BigInt
  adminFeeRate_not: BigInt
  adminFeeRate_gt: BigInt
  adminFeeRate_lt: BigInt
  adminFeeRate_gte: BigInt
  adminFeeRate_lte: BigInt
  adminFeeRate_in: [BigInt!]
  adminFeeRate_not_in: [BigInt!]
  collateralLiquidator: Bytes
  collateralLiquidator_not: Bytes
  collateralLiquidator_gt: Bytes
  collateralLiquidator_lt: Bytes
  collateralLiquidator_gte: Bytes
  collateralLiquidator_lte: Bytes
  collateralLiquidator_in: [Bytes!]
  collateralLiquidator_not_in: [Bytes!]
  collateralLiquidator_contains: Bytes
  collateralLiquidator_not_contains: Bytes
  delegationRegistry: Bytes
  delegationRegistry_not: Bytes
  delegationRegistry_gt: Bytes
  delegationRegistry_lt: Bytes
  delegationRegistry_gte: Bytes
  delegationRegistry_lte: Bytes
  delegationRegistry_in: [Bytes!]
  delegationRegistry_not_in: [Bytes!]
  delegationRegistry_contains: Bytes
  delegationRegistry_not_contains: Bytes
  tokenIdRange: [BigInt!]
  tokenIdRange_not: [BigInt!]
  tokenIdRange_contains: [BigInt!]
  tokenIdRange_contains_nocase: [BigInt!]
  tokenIdRange_not_contains: [BigInt!]
  tokenIdRange_not_contains_nocase: [BigInt!]
  tokenIdSet: [BigInt!]
  tokenIdSet_not: [BigInt!]
  tokenIdSet_contains: [BigInt!]
  tokenIdSet_contains_nocase: [BigInt!]
  tokenIdSet_not_contains: [BigInt!]
  tokenIdSet_not_contains_nocase: [BigInt!]
  tokenIdMerkleRoot: Bytes
  tokenIdMerkleRoot_not: Bytes
  tokenIdMerkleRoot_gt: Bytes
  tokenIdMerkleRoot_lt: Bytes
  tokenIdMerkleRoot_gte: Bytes
  tokenIdMerkleRoot_lte: Bytes
  tokenIdMerkleRoot_in: [Bytes!]
  tokenIdMerkleRoot_not_in: [Bytes!]
  tokenIdMerkleRoot_contains: Bytes
  tokenIdMerkleRoot_not_contains: Bytes
  tokenIdMerkleMetadataURI: String
  tokenIdMerkleMetadataURI_not: String
  tokenIdMerkleMetadataURI_gt: String
  tokenIdMerkleMetadataURI_lt: String
  tokenIdMerkleMetadataURI_gte: String
  tokenIdMerkleMetadataURI_lte: String
  tokenIdMerkleMetadataURI_in: [String!]
  tokenIdMerkleMetadataURI_not_in: [String!]
  tokenIdMerkleMetadataURI_contains: String
  tokenIdMerkleMetadataURI_contains_nocase: String
  tokenIdMerkleMetadataURI_not_contains: String
  tokenIdMerkleMetadataURI_not_contains_nocase: String
  tokenIdMerkleMetadataURI_starts_with: String
  tokenIdMerkleMetadataURI_starts_with_nocase: String
  tokenIdMerkleMetadataURI_not_starts_with: String
  tokenIdMerkleMetadataURI_not_starts_with_nocase: String
  tokenIdMerkleMetadataURI_ends_with: String
  tokenIdMerkleMetadataURI_ends_with_nocase: String
  tokenIdMerkleMetadataURI_not_ends_with: String
  tokenIdMerkleMetadataURI_not_ends_with_nocase: String
  maxBorrows: [BigInt!]
  maxBorrows_not: [BigInt!]
  maxBorrows_contains: [BigInt!]
  maxBorrows_contains_nocase: [BigInt!]
  maxBorrows_not_contains: [BigInt!]
  maxBorrows_not_contains_nocase: [BigInt!]
  adminFeeBalance: BigInt
  adminFeeBalance_not: BigInt
  adminFeeBalance_gt: BigInt
  adminFeeBalance_lt: BigInt
  adminFeeBalance_gte: BigInt
  adminFeeBalance_lte: BigInt
  adminFeeBalance_in: [BigInt!]
  adminFeeBalance_not_in: [BigInt!]
  ticks_: Tick_filter
  deposits_: Deposit_filter
  loans_: Loan_filter
  events_: PoolEvent_filter
  totalValueLocked: BigInt
  totalValueLocked_not: BigInt
  totalValueLocked_gt: BigInt
  totalValueLocked_lt: BigInt
  totalValueLocked_gte: BigInt
  totalValueLocked_lte: BigInt
  totalValueLocked_in: [BigInt!]
  totalValueLocked_not_in: [BigInt!]
  totalValueAvailable: BigInt
  totalValueAvailable_not: BigInt
  totalValueAvailable_gt: BigInt
  totalValueAvailable_lt: BigInt
  totalValueAvailable_gte: BigInt
  totalValueAvailable_lte: BigInt
  totalValueAvailable_in: [BigInt!]
  totalValueAvailable_not_in: [BigInt!]
  totalValueUsed: BigInt
  totalValueUsed_not: BigInt
  totalValueUsed_gt: BigInt
  totalValueUsed_lt: BigInt
  totalValueUsed_gte: BigInt
  totalValueUsed_lte: BigInt
  totalValueUsed_in: [BigInt!]
  totalValueUsed_not_in: [BigInt!]
  loansOriginated: BigInt
  loansOriginated_not: BigInt
  loansOriginated_gt: BigInt
  loansOriginated_lt: BigInt
  loansOriginated_gte: BigInt
  loansOriginated_lte: BigInt
  loansOriginated_in: [BigInt!]
  loansOriginated_not_in: [BigInt!]
  loansActive: BigInt
  loansActive_not: BigInt
  loansActive_gt: BigInt
  loansActive_lt: BigInt
  loansActive_gte: BigInt
  loansActive_lte: BigInt
  loansActive_in: [BigInt!]
  loansActive_not_in: [BigInt!]
  loansRepaid: BigInt
  loansRepaid_not: BigInt
  loansRepaid_gt: BigInt
  loansRepaid_lt: BigInt
  loansRepaid_gte: BigInt
  loansRepaid_lte: BigInt
  loansRepaid_in: [BigInt!]
  loansRepaid_not_in: [BigInt!]
  loansLiquidated: BigInt
  loansLiquidated_not: BigInt
  loansLiquidated_gt: BigInt
  loansLiquidated_lt: BigInt
  loansLiquidated_gte: BigInt
  loansLiquidated_lte: BigInt
  loansLiquidated_in: [BigInt!]
  loansLiquidated_not_in: [BigInt!]
  loansCollateralLiquidated: BigInt
  loansCollateralLiquidated_not: BigInt
  loansCollateralLiquidated_gt: BigInt
  loansCollateralLiquidated_lt: BigInt
  loansCollateralLiquidated_gte: BigInt
  loansCollateralLiquidated_lte: BigInt
  loansCollateralLiquidated_in: [BigInt!]
  loansCollateralLiquidated_not_in: [BigInt!]
  dayData_: PoolDayData_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Pool_filter]
  or: [Pool_filter]
}

enum Pool_orderBy {
  id
  implementationVersionMajor
  implementation
  collateralToken
  collateralToken__id
  collateralToken__name
  currencyToken
  currencyToken__id
  currencyToken__name
  currencyToken__symbol
  collateralWrappers
  durations
  rates
  adminFeeRate
  collateralLiquidator
  delegationRegistry
  tokenIdRange
  tokenIdSet
  tokenIdMerkleRoot
  tokenIdMerkleMetadataURI
  maxBorrows
  adminFeeBalance
  ticks
  deposits
  loans
  events
  totalValueLocked
  totalValueAvailable
  totalValueUsed
  loansOriginated
  loansActive
  loansRepaid
  loansLiquidated
  loansCollateralLiquidated
  dayData
}

type Query {
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  poolDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolDayData
  poolDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolDayData_orderBy
    orderDirection: OrderDirection
    where: PoolDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolDayData!]!
  collateralToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollateralToken
  collateralTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CollateralToken_orderBy
    orderDirection: OrderDirection
    where: CollateralToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollateralToken!]!
  currencyToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CurrencyToken
  currencyTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CurrencyToken_orderBy
    orderDirection: OrderDirection
    where: CurrencyToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CurrencyToken!]!
  tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tick
  ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Tick_orderBy
    orderDirection: OrderDirection
    where: Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Tick!]!
  deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  redemption(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Redemption
  redemptions(
    skip: Int = 0
    first: Int = 100
    orderBy: Redemption_orderBy
    orderDirection: OrderDirection
    where: Redemption_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Redemption!]!
  bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bundle
  bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: Bundle_orderBy
    orderDirection: OrderDirection
    where: Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bundle!]!
  batch(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Batch
  batches(
    skip: Int = 0
    first: Int = 100
    orderBy: Batch_orderBy
    orderDirection: OrderDirection
    where: Batch_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Batch!]!
  loan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  loans(
    skip: Int = 0
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    where: Loan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Loan!]!
  poolEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolEvent
  poolEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolEvent_orderBy
    orderDirection: OrderDirection
    where: PoolEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolEvent!]!
  loanOriginated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanOriginated
  loanOriginateds(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanOriginated_orderBy
    orderDirection: OrderDirection
    where: LoanOriginated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanOriginated!]!
  loanRepaid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRepaid
  loanRepaids(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRepaid_orderBy
    orderDirection: OrderDirection
    where: LoanRepaid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRepaid!]!
  loanLiquidated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanLiquidated
  loanLiquidateds(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanLiquidated_orderBy
    orderDirection: OrderDirection
    where: LoanLiquidated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanLiquidated!]!
  collateralLiquidated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollateralLiquidated
  collateralLiquidateds(
    skip: Int = 0
    first: Int = 100
    orderBy: CollateralLiquidated_orderBy
    orderDirection: OrderDirection
    where: CollateralLiquidated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollateralLiquidated!]!
  deposited(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposited
  depositeds(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposited_orderBy
    orderDirection: OrderDirection
    where: Deposited_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposited!]!
  redeemed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Redeemed
  redeemeds(
    skip: Int = 0
    first: Int = 100
    orderBy: Redeemed_orderBy
    orderDirection: OrderDirection
    where: Redeemed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Redeemed!]!
  withdrawn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdrawn
  withdrawns(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdrawn_orderBy
    orderDirection: OrderDirection
    where: Withdrawn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdrawn!]!
  tokenCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenCreated
  tokenCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenCreated_orderBy
    orderDirection: OrderDirection
    where: TokenCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenCreated!]!
  liquidation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Liquidation
  liquidations(
    skip: Int = 0
    first: Int = 100
    orderBy: Liquidation_orderBy
    orderDirection: OrderDirection
    where: Liquidation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Liquidation!]!
  auction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Auction
  auctions(
    skip: Int = 0
    first: Int = 100
    orderBy: Auction_orderBy
    orderDirection: OrderDirection
    where: Auction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Auction!]!
  bid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bid
  bids(
    skip: Int = 0
    first: Int = 100
    orderBy: Bid_orderBy
    orderDirection: OrderDirection
    where: Bid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bid!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Redeemed {
  id: Bytes!
  account: Bytes!
  tick: Tick!
  shares: BigInt!
  estimatedAmount: BigInt!
}

input Redeemed_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Tick_filter
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  estimatedAmount: BigInt
  estimatedAmount_not: BigInt
  estimatedAmount_gt: BigInt
  estimatedAmount_lt: BigInt
  estimatedAmount_gte: BigInt
  estimatedAmount_lte: BigInt
  estimatedAmount_in: [BigInt!]
  estimatedAmount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Redeemed_filter]
  or: [Redeemed_filter]
}

enum Redeemed_orderBy {
  id
  account
  tick
  tick__id
  tick__raw
  tick__limit
  tick__duration
  tick__rate
  tick__durationIndex
  tick__rateIndex
  tick__active
  tick__value
  tick__shares
  tick__available
  tick__pending
  tick__redemptionPending
  tick__prev
  tick__next
  tick__accrued
  tick__accrualRate
  tick__accrualTimestamp
  tick__principalWeightedDuration
  tick__interestWeightedMaturity
  shares
  estimatedAmount
}

type Redemption {
  id: Bytes!
  redemptionId: BigInt!
  deposit: Deposit!
  shares: BigInt!
}

input Redemption_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  redemptionId: BigInt
  redemptionId_not: BigInt
  redemptionId_gt: BigInt
  redemptionId_lt: BigInt
  redemptionId_gte: BigInt
  redemptionId_lte: BigInt
  redemptionId_in: [BigInt!]
  redemptionId_not_in: [BigInt!]
  deposit: String
  deposit_not: String
  deposit_gt: String
  deposit_lt: String
  deposit_gte: String
  deposit_lte: String
  deposit_in: [String!]
  deposit_not_in: [String!]
  deposit_contains: String
  deposit_contains_nocase: String
  deposit_not_contains: String
  deposit_not_contains_nocase: String
  deposit_starts_with: String
  deposit_starts_with_nocase: String
  deposit_not_starts_with: String
  deposit_not_starts_with_nocase: String
  deposit_ends_with: String
  deposit_ends_with_nocase: String
  deposit_not_ends_with: String
  deposit_not_ends_with_nocase: String
  deposit_: Deposit_filter
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Redemption_filter]
  or: [Redemption_filter]
}

enum Redemption_orderBy {
  id
  redemptionId
  deposit
  deposit__id
  deposit__account
  deposit__shares
  deposit__depositedAmount
  deposit__updatedAt
  deposit__createdAt
  shares
}

type Subscription {
  pool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Pool
  pools(
    skip: Int = 0
    first: Int = 100
    orderBy: Pool_orderBy
    orderDirection: OrderDirection
    where: Pool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Pool!]!
  poolDayData(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolDayData
  poolDayDatas(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolDayData_orderBy
    orderDirection: OrderDirection
    where: PoolDayData_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolDayData!]!
  collateralToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollateralToken
  collateralTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CollateralToken_orderBy
    orderDirection: OrderDirection
    where: CollateralToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollateralToken!]!
  currencyToken(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CurrencyToken
  currencyTokens(
    skip: Int = 0
    first: Int = 100
    orderBy: CurrencyToken_orderBy
    orderDirection: OrderDirection
    where: CurrencyToken_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CurrencyToken!]!
  tick(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tick
  ticks(
    skip: Int = 0
    first: Int = 100
    orderBy: Tick_orderBy
    orderDirection: OrderDirection
    where: Tick_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Tick!]!
  deposit(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposit
  deposits(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposit_orderBy
    orderDirection: OrderDirection
    where: Deposit_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposit!]!
  redemption(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Redemption
  redemptions(
    skip: Int = 0
    first: Int = 100
    orderBy: Redemption_orderBy
    orderDirection: OrderDirection
    where: Redemption_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Redemption!]!
  bundle(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bundle
  bundles(
    skip: Int = 0
    first: Int = 100
    orderBy: Bundle_orderBy
    orderDirection: OrderDirection
    where: Bundle_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bundle!]!
  batch(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Batch
  batches(
    skip: Int = 0
    first: Int = 100
    orderBy: Batch_orderBy
    orderDirection: OrderDirection
    where: Batch_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Batch!]!
  loan(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Loan
  loans(
    skip: Int = 0
    first: Int = 100
    orderBy: Loan_orderBy
    orderDirection: OrderDirection
    where: Loan_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Loan!]!
  poolEvent(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PoolEvent
  poolEvents(
    skip: Int = 0
    first: Int = 100
    orderBy: PoolEvent_orderBy
    orderDirection: OrderDirection
    where: PoolEvent_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [PoolEvent!]!
  loanOriginated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanOriginated
  loanOriginateds(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanOriginated_orderBy
    orderDirection: OrderDirection
    where: LoanOriginated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanOriginated!]!
  loanRepaid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanRepaid
  loanRepaids(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanRepaid_orderBy
    orderDirection: OrderDirection
    where: LoanRepaid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanRepaid!]!
  loanLiquidated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): LoanLiquidated
  loanLiquidateds(
    skip: Int = 0
    first: Int = 100
    orderBy: LoanLiquidated_orderBy
    orderDirection: OrderDirection
    where: LoanLiquidated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [LoanLiquidated!]!
  collateralLiquidated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): CollateralLiquidated
  collateralLiquidateds(
    skip: Int = 0
    first: Int = 100
    orderBy: CollateralLiquidated_orderBy
    orderDirection: OrderDirection
    where: CollateralLiquidated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [CollateralLiquidated!]!
  deposited(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deposited
  depositeds(
    skip: Int = 0
    first: Int = 100
    orderBy: Deposited_orderBy
    orderDirection: OrderDirection
    where: Deposited_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Deposited!]!
  redeemed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Redeemed
  redeemeds(
    skip: Int = 0
    first: Int = 100
    orderBy: Redeemed_orderBy
    orderDirection: OrderDirection
    where: Redeemed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Redeemed!]!
  withdrawn(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Withdrawn
  withdrawns(
    skip: Int = 0
    first: Int = 100
    orderBy: Withdrawn_orderBy
    orderDirection: OrderDirection
    where: Withdrawn_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Withdrawn!]!
  tokenCreated(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TokenCreated
  tokenCreateds(
    skip: Int = 0
    first: Int = 100
    orderBy: TokenCreated_orderBy
    orderDirection: OrderDirection
    where: TokenCreated_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [TokenCreated!]!
  liquidation(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Liquidation
  liquidations(
    skip: Int = 0
    first: Int = 100
    orderBy: Liquidation_orderBy
    orderDirection: OrderDirection
    where: Liquidation_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Liquidation!]!
  auction(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Auction
  auctions(
    skip: Int = 0
    first: Int = 100
    orderBy: Auction_orderBy
    orderDirection: OrderDirection
    where: Auction_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Auction!]!
  bid(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Bid
  bids(
    skip: Int = 0
    first: Int = 100
    orderBy: Bid_orderBy
    orderDirection: OrderDirection
    where: Bid_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Bid!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Tick {
  id: Bytes!
  pool: Pool!
  raw: BigInt!
  limit: BigInt!
  duration: BigInt!
  rate: BigInt!
  durationIndex: Int!
  rateIndex: Int!
  active: Boolean!
  value: BigInt!
  shares: BigInt!
  available: BigInt!
  pending: BigInt!
  redemptionPending: BigInt!
  prev: BigInt!
  next: BigInt!
  accrued: BigInt
  accrualRate: BigInt
  accrualTimestamp: BigInt
  principalWeightedDuration: BigInt!
  interestWeightedMaturity: BigInt!
  token: CurrencyToken
}

input Tick_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  pool: String
  pool_not: String
  pool_gt: String
  pool_lt: String
  pool_gte: String
  pool_lte: String
  pool_in: [String!]
  pool_not_in: [String!]
  pool_contains: String
  pool_contains_nocase: String
  pool_not_contains: String
  pool_not_contains_nocase: String
  pool_starts_with: String
  pool_starts_with_nocase: String
  pool_not_starts_with: String
  pool_not_starts_with_nocase: String
  pool_ends_with: String
  pool_ends_with_nocase: String
  pool_not_ends_with: String
  pool_not_ends_with_nocase: String
  pool_: Pool_filter
  raw: BigInt
  raw_not: BigInt
  raw_gt: BigInt
  raw_lt: BigInt
  raw_gte: BigInt
  raw_lte: BigInt
  raw_in: [BigInt!]
  raw_not_in: [BigInt!]
  limit: BigInt
  limit_not: BigInt
  limit_gt: BigInt
  limit_lt: BigInt
  limit_gte: BigInt
  limit_lte: BigInt
  limit_in: [BigInt!]
  limit_not_in: [BigInt!]
  duration: BigInt
  duration_not: BigInt
  duration_gt: BigInt
  duration_lt: BigInt
  duration_gte: BigInt
  duration_lte: BigInt
  duration_in: [BigInt!]
  duration_not_in: [BigInt!]
  rate: BigInt
  rate_not: BigInt
  rate_gt: BigInt
  rate_lt: BigInt
  rate_gte: BigInt
  rate_lte: BigInt
  rate_in: [BigInt!]
  rate_not_in: [BigInt!]
  durationIndex: Int
  durationIndex_not: Int
  durationIndex_gt: Int
  durationIndex_lt: Int
  durationIndex_gte: Int
  durationIndex_lte: Int
  durationIndex_in: [Int!]
  durationIndex_not_in: [Int!]
  rateIndex: Int
  rateIndex_not: Int
  rateIndex_gt: Int
  rateIndex_lt: Int
  rateIndex_gte: Int
  rateIndex_lte: Int
  rateIndex_in: [Int!]
  rateIndex_not_in: [Int!]
  active: Boolean
  active_not: Boolean
  active_in: [Boolean!]
  active_not_in: [Boolean!]
  value: BigInt
  value_not: BigInt
  value_gt: BigInt
  value_lt: BigInt
  value_gte: BigInt
  value_lte: BigInt
  value_in: [BigInt!]
  value_not_in: [BigInt!]
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  available: BigInt
  available_not: BigInt
  available_gt: BigInt
  available_lt: BigInt
  available_gte: BigInt
  available_lte: BigInt
  available_in: [BigInt!]
  available_not_in: [BigInt!]
  pending: BigInt
  pending_not: BigInt
  pending_gt: BigInt
  pending_lt: BigInt
  pending_gte: BigInt
  pending_lte: BigInt
  pending_in: [BigInt!]
  pending_not_in: [BigInt!]
  redemptionPending: BigInt
  redemptionPending_not: BigInt
  redemptionPending_gt: BigInt
  redemptionPending_lt: BigInt
  redemptionPending_gte: BigInt
  redemptionPending_lte: BigInt
  redemptionPending_in: [BigInt!]
  redemptionPending_not_in: [BigInt!]
  prev: BigInt
  prev_not: BigInt
  prev_gt: BigInt
  prev_lt: BigInt
  prev_gte: BigInt
  prev_lte: BigInt
  prev_in: [BigInt!]
  prev_not_in: [BigInt!]
  next: BigInt
  next_not: BigInt
  next_gt: BigInt
  next_lt: BigInt
  next_gte: BigInt
  next_lte: BigInt
  next_in: [BigInt!]
  next_not_in: [BigInt!]
  accrued: BigInt
  accrued_not: BigInt
  accrued_gt: BigInt
  accrued_lt: BigInt
  accrued_gte: BigInt
  accrued_lte: BigInt
  accrued_in: [BigInt!]
  accrued_not_in: [BigInt!]
  accrualRate: BigInt
  accrualRate_not: BigInt
  accrualRate_gt: BigInt
  accrualRate_lt: BigInt
  accrualRate_gte: BigInt
  accrualRate_lte: BigInt
  accrualRate_in: [BigInt!]
  accrualRate_not_in: [BigInt!]
  accrualTimestamp: BigInt
  accrualTimestamp_not: BigInt
  accrualTimestamp_gt: BigInt
  accrualTimestamp_lt: BigInt
  accrualTimestamp_gte: BigInt
  accrualTimestamp_lte: BigInt
  accrualTimestamp_in: [BigInt!]
  accrualTimestamp_not_in: [BigInt!]
  principalWeightedDuration: BigInt
  principalWeightedDuration_not: BigInt
  principalWeightedDuration_gt: BigInt
  principalWeightedDuration_lt: BigInt
  principalWeightedDuration_gte: BigInt
  principalWeightedDuration_lte: BigInt
  principalWeightedDuration_in: [BigInt!]
  principalWeightedDuration_not_in: [BigInt!]
  interestWeightedMaturity: BigInt
  interestWeightedMaturity_not: BigInt
  interestWeightedMaturity_gt: BigInt
  interestWeightedMaturity_lt: BigInt
  interestWeightedMaturity_gte: BigInt
  interestWeightedMaturity_lte: BigInt
  interestWeightedMaturity_in: [BigInt!]
  interestWeightedMaturity_not_in: [BigInt!]
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: CurrencyToken_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Tick_filter]
  or: [Tick_filter]
}

enum Tick_orderBy {
  id
  pool
  pool__id
  pool__implementationVersionMajor
  pool__implementation
  pool__adminFeeRate
  pool__collateralLiquidator
  pool__delegationRegistry
  pool__tokenIdMerkleRoot
  pool__tokenIdMerkleMetadataURI
  pool__adminFeeBalance
  pool__totalValueLocked
  pool__totalValueAvailable
  pool__totalValueUsed
  pool__loansOriginated
  pool__loansActive
  pool__loansRepaid
  pool__loansLiquidated
  pool__loansCollateralLiquidated
  raw
  limit
  duration
  rate
  durationIndex
  rateIndex
  active
  value
  shares
  available
  pending
  redemptionPending
  prev
  next
  accrued
  accrualRate
  accrualTimestamp
  principalWeightedDuration
  interestWeightedMaturity
  token
  token__id
  token__name
  token__symbol
}

type TokenCreated {
  id: Bytes!
  tick: Tick!
  token: CurrencyToken!
}

input TokenCreated_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Tick_filter
  token: String
  token_not: String
  token_gt: String
  token_lt: String
  token_gte: String
  token_lte: String
  token_in: [String!]
  token_not_in: [String!]
  token_contains: String
  token_contains_nocase: String
  token_not_contains: String
  token_not_contains_nocase: String
  token_starts_with: String
  token_starts_with_nocase: String
  token_not_starts_with: String
  token_not_starts_with_nocase: String
  token_ends_with: String
  token_ends_with_nocase: String
  token_not_ends_with: String
  token_not_ends_with_nocase: String
  token_: CurrencyToken_filter
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TokenCreated_filter]
  or: [TokenCreated_filter]
}

enum TokenCreated_orderBy {
  id
  tick
  tick__id
  tick__raw
  tick__limit
  tick__duration
  tick__rate
  tick__durationIndex
  tick__rateIndex
  tick__active
  tick__value
  tick__shares
  tick__available
  tick__pending
  tick__redemptionPending
  tick__prev
  tick__next
  tick__accrued
  tick__accrualRate
  tick__accrualTimestamp
  tick__principalWeightedDuration
  tick__interestWeightedMaturity
  token
  token__id
  token__name
  token__symbol
}

type Withdrawn {
  id: Bytes!
  account: Bytes!
  tick: Tick!
  shares: BigInt!
  amount: BigInt!
}

input Withdrawn_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  account: Bytes
  account_not: Bytes
  account_gt: Bytes
  account_lt: Bytes
  account_gte: Bytes
  account_lte: Bytes
  account_in: [Bytes!]
  account_not_in: [Bytes!]
  account_contains: Bytes
  account_not_contains: Bytes
  tick: String
  tick_not: String
  tick_gt: String
  tick_lt: String
  tick_gte: String
  tick_lte: String
  tick_in: [String!]
  tick_not_in: [String!]
  tick_contains: String
  tick_contains_nocase: String
  tick_not_contains: String
  tick_not_contains_nocase: String
  tick_starts_with: String
  tick_starts_with_nocase: String
  tick_not_starts_with: String
  tick_not_starts_with_nocase: String
  tick_ends_with: String
  tick_ends_with_nocase: String
  tick_not_ends_with: String
  tick_not_ends_with_nocase: String
  tick_: Tick_filter
  shares: BigInt
  shares_not: BigInt
  shares_gt: BigInt
  shares_lt: BigInt
  shares_gte: BigInt
  shares_lte: BigInt
  shares_in: [BigInt!]
  shares_not_in: [BigInt!]
  amount: BigInt
  amount_not: BigInt
  amount_gt: BigInt
  amount_lt: BigInt
  amount_gte: BigInt
  amount_lte: BigInt
  amount_in: [BigInt!]
  amount_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Withdrawn_filter]
  or: [Withdrawn_filter]
}

enum Withdrawn_orderBy {
  id
  account
  tick
  tick__id
  tick__raw
  tick__limit
  tick__duration
  tick__rate
  tick__durationIndex
  tick__rateIndex
  tick__active
  tick__value
  tick__shares
  tick__available
  tick__pending
  tick__redemptionPending
  tick__prev
  tick__next
  tick__accrued
  tick__accrualRate
  tick__accrualTimestamp
  tick__principalWeightedDuration
  tick__interestWeightedMaturity
  shares
  amount
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}